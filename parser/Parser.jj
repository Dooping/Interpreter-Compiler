
PARSER_BEGIN(Parser)

package parser;

import java.util.*;
import java.util.ArrayList;
import AST.*;
import exceptions.*;
import main.*;
import Types.*;
import Values.*;

/** ID lister. */
public class Parser {
  /** Main entry point. */
  public static void main(String args[]) {
    Parser parser = new Parser(System.in);
    ASTNode exp;

    while (true) {
    try {
    exp = parser.Start();
	exp.typeCheck(new Environ<Type>());
   System.out.println( exp.toString() + " = " + exp.eval(new Environ<IValue>()) );
    } catch (Exception e) {
      System.out.println ("Syntax Error!");
       e.printStackTrace();
      parser.ReInit(System.in);
    }
    }
  }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\t"
| "\r"
}

TOKEN :
{
  < DECL : "decl" >
   |
  < IN : "in" >
   |
  < END : "end" >
  |
  < WHILE : "while" >
  |
  < DO : "do" >
  |
  < ASSOC : "=" >
  |
  < DOT  : "." >
  |
  < IF : "if" >
  |
  < THEN : "then" >
  |
  < ELSE : "else" >
  |
  < RefAssoc : ":=" >
  |
  < TWOEXPR : ";" >
  |
  < BOOL : "true"|"false" >
  | 
  < Num: (["0"-"9"]) + >
  |
  < PLUS : "+" >
  |
  < MINUS : "-">
  |
  < TIMES : "*">
  |
  < DIV : "/">
  |
  < LPAR : "(" >
  |
  < RPAR : ")" >
  |
  < LCHAV : "{" >
  |
  < RCHAV : "}" >
  |
  < BIGGER : ">" >
  |
  < SMALLER : "<" >
  |
  < EQUALS : "==" >
  |
  < DIF : "!=" >
  |
  < AND : "&&" >
  |
  < OR : "||" >
  |
  < EL: "\n" >
  |
  < FUN : "fun" >
  |
   < FUNT : "funT" >
  |
  < ARROW : "=>" >
  |
   < ARROWT : "->" >
  |
    < INT : "int" >
  |
   < BOOLEAN : "bool" >
  |
  < REF : "ref" >
  |
  < COLON : ":" >
  |
  < COMMA : "," >
  |
  < VAR: "var" >
  |
  < LBRACKET: "[" >
  |
  < RBRACKET: "]" >
  |
  < CONCAT: "::" >
  |
  < HD: "hd" >
  |
  < TL: "tl" >
  |
  < Id: ["a"-"z","A"-"Z"] ( ["a"-"z","A"-"Z","0"-"9"] )* >
}

ASTNode Start():
{ ASTNode t; }{
  t = Texp() <EL> 
  {return t; }
}

ASTNode Texp():
{ Token op;
  ASTNode t1, t2; }
{
     t1=Concat() (  op=<TWOEXPR>  t2=Concat() 
               { t1 = new ASTTwoExpr(t1,t2); }
               ) *
     { return t1; } 
}

ASTNode Concat() :
{ Token n; 
  ASTNode t1,t2;}
{
   t1 =REF() (< CONCAT > t2=REF() { t1 = new ASTConcat(t1,t2);})*
   {return t1;}
}

ASTNode List() :
{ ASTNode t1,t2;}
{
   t1 =REF() ((	< TWOEXPR > t2 =List() {t1 = new ASTList(t1,t2);})+
				 |
				 (				   < RBRACKET >{t1 = new ASTList(t1,null);}))
   {return t1;}
}

ASTNode REF() :
{Token n;
  ASTNode q1, q2;}
{
     q1 = Exp() ( ( <RefAssoc>  ) q2=Exp()
    			 { 
                    q1 = new ASTAssign(q1,q2);
                 }
                  )?
     { return q1; } 
}

ASTNode Exp():
{ Token op;
  ASTNode t1, t2; }
{
     t1=Term() ( ( op=<PLUS> | op=<MINUS> ) t2=Term() 
                 { if (op.kind == PLUS) 
                         t1 = new ASTPlus(t1,t2);
                   else  t1 = new ASTSub(t1,t2);
                 } 
               ) *
     { return t1; } 
}

ASTNode Term() :
{Token op;
  ASTNode f1, f2;}
{
     f1 = Bexp() ( ( op=<TIMES> | op=<DIV> ) f2=Bexp()
    			 { if (op.kind == TIMES) 
                         f1 = new ASTMul(f1,f2);
                   else  f1 = new ASTDiv(f1,f2);
                 }
                  )*
     { return f1; } 
}

ASTNode Bexp() :
{Token op;
  ASTNode q1, q2;}
{
     q1 = Cmp() ( ( op=<AND> | op=<OR> ) q2=Cmp()
    			 { if (op.kind == AND) 
                         q1 = new ASTAnd(q1,q2);
                   else  q1 = new ASTOr(q1,q2);
                 }
                  )*
     { return q1; } 
}

ASTNode Cmp():
{Token op;
  ASTNode d1, d2;}
{
     d1 = Call() ( ( op=<BIGGER> | op=<SMALLER> | op=<EQUALS> | op=<DIF>) d2=Call()
    			 { if (op.kind == BIGGER)    			 {
    			    d1 = new ASTBigger(d1,d2);
    			  }	
                   else if (op.kind == SMALLER)                   {
                    	d1 = new ASTSmaller(d1,d2);
                   }
                    else if (op.kind == EQUALS)                    {                      d1 = new ASTEquals(d1,d2);
                    }
                     else if (op.kind == DIF)
                    {
                      d1 = new ASTDif(d1,d2);
                    }
                    	
                 }
                  )*
     { return d1; } 
}

ASTNode Call():
{
  ASTNode f1,f2;
}
{

  f1=CallRecord() (
    < LPAR > f2=Texp() < RPAR >
    {
      f1 = new ASTCall(f1,f2);    }    
    )*
  {
    return f1;
  }
}

ASTNode CallRecord():
{
  ASTNode f1;
  Token n;
}
{

  f1=Fact() (
    < DOT > n = <Id>
    {
      f1 = new ASTCallRecord(f1,n.image);
    }
    
    )*
  {
    return f1;
  }
}


ASTNode Fact() :
{ Token n; 
  ASTNode t, t1,t2;
  Type ty;
  ArrayList <Binding> bindings = new ArrayList<Binding>();
  }
{

    n=<Num> { t = new ASTNum(Integer.parseInt(n.image)); return t; }
   |n=< BOOL >  { t = new ASTBool(Boolean.parseBoolean(n.image)); return t; }
   | < VAR ><LPAR > t=Texp() < RPAR > { t = new ASTVar(t); return t; }
   | <TIMES>t=Fact() { return new ASTDesref(t);}
   | < MINUS > t=Fact() { t = new ASTNegative(t); return t; }
   | <LPAR> t=Texp() <RPAR> { return t; }
   | n = <Id> { return new ASTId(n.image); }
   | t = Decl() {   return t; }
   | <WHILE> t = Texp() <DO> t1 = Texp()  <END> { t = new ASTWhile(t,t1); return t;}
   | <IF> t = Texp() <THEN> t1 = Texp()  <ELSE> t2=Texp() < END > { t = new ASTIf(t,t1,t2); return t;}
   | < FUN> n=<Id > <COLON> ty = type()<ARROW> t = Texp() < END > {return new ASTFun(n.image,t,ty);}
   | <LCHAV> t = Record() <RCHAV>{return t; }
   | <LBRACKET> t = List(){return t; }
   | < HD > t=Fact(){return new ASTHd(t)}
   | < TL > t=Fact(){return new ASTTl(t)}            
}


ASTNode Record():
{
  ASTNode t;
  Token x;
  ArrayList <Binding> bindings = new ArrayList<Binding>();
}
{
	 x=<Id><ASSOC> t = Fact() 
	{ bindings.add(new Binding (x.image, t));}
	(<COMMA> x=<Id><ASSOC> t = Texp() { bindings.add(new Binding (x.image, t));}  )*
	{
	  return new ASTRecord(bindings);
	}
	 

}


ASTNode Decl():
{
  ASTNode t1,t2;
  Token x;
  ArrayList <Binding> bindings = new ArrayList<Binding>();

}
{
 <DECL> (x = <Id> <ASSOC> t1 = Texp()
 { bindings.add(new Binding (x.image, t1));}
 )+
  <IN> t2 = Texp() <END>
 {
   return new ASTDecl(bindings,t2);
 }

}



Type type():
{
  Type t1,t2;
}
{
	t1 = baseType()
	( <ARROWT> t2=type()
	{
	  t1 = new funType(t1,t2);
	}
	)?
	{
	  return t1;
	}
	
}


Type baseType():
{
    Type t1,t2;
    ArrayList <String> ids = new ArrayList<String>();
     ArrayList <Type> types = new ArrayList<Type>();
    Token x;
}
{
  < INT >
  {
    return IntType.value;
  }
  
|
< BOOLEAN >
{
  return BoolType.value;
}

|
< REF ><LPAR > t1 = type()< RPAR >
{
return new RefType(t1);
}
|
	< LCHAV > x=<Id><COLON> t1 = type()		{ types.add(t1); ids.add(x.image);}
		(<COMMA> x=<Id><COLON> t1 = type() { types.add(t1); ids.add(x.image);}  )*
	<RCHAV>
	{
		return new RecordType(types, ids);
	}

}

